{"ast":null,"code":"var _jsxFileName = \"/home/mtech/Documents/react/form/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useValidator from \"../Hooks/use-validator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: name,\n    inputIsValid: nameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameInputCHangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset: nameReset\n  } = useValidator(value => value.trim() !== \"\"); // Field value\n\n  const [email, setEmail] = useState(\"\"); // Field Touch\n\n  const [emailIsTouched, setEmailIsTouched] = useState(false); // Field value Validation\n\n  const emailIsValid = email.trim() !== \"\" && email.trim().includes(\"@\") && email.trim().includes(\".\"); // Field Validation on blur\n\n  const emailInputIsValid = !emailIsValid && emailIsTouched; // Form Validation\n\n  let formIsValid = false;\n  console.log(nameIsValid);\n\n  if (nameIsValid && emailInputIsValid) {\n    formIsValid = true;\n  } //On Field Change Update\n\n\n  const emailInputCHangeHandler = event => {\n    setEmail(event.target.value);\n  }; //On Field blur Update\n\n\n  const emailInputBlurHandler = () => {\n    setEmailIsTouched(true);\n  }; //On Form Submit\n\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    setEmailIsTouched(true);\n    if (formIsValid) return; // Reset position\n\n    console.log(\"Submitted\");\n    nameReset();\n    setEmail(\"\");\n    setEmailIsTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onInput: nameInputCHangeHandler,\n        onBlur: nameInputBlurHandler,\n        id: \"name\",\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Please Enter Valid Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onInput: emailInputCHangeHandler,\n        onBlur: emailInputBlurHandler,\n        id: \"email\",\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), !emailIsValid && emailIsTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Please Enter Valid Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"lhCYX829/7cgD4Jr1CEgdF6kVxs=\", false, function () {\n  return [useValidator];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/mtech/Documents/react/form/src/components/SimpleInput.js"],"names":["useState","useValidator","SimpleInput","props","value","name","inputIsValid","nameIsValid","hasError","nameInputHasError","valueChangeHandler","nameInputCHangeHandler","inputBlurHandler","nameInputBlurHandler","reset","nameReset","trim","email","setEmail","emailIsTouched","setEmailIsTouched","emailIsValid","includes","emailInputIsValid","formIsValid","console","log","emailInputCHangeHandler","event","target","emailInputBlurHandler","formSubmitHandler","preventDefault","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AACJC,IAAAA,KAAK,EAAEC,IADH;AAEJC,IAAAA,YAAY,EAAEC,WAFV;AAGJC,IAAAA,QAAQ,EAAEC,iBAHN;AAIJC,IAAAA,kBAAkB,EAAEC,sBAJhB;AAKJC,IAAAA,gBAAgB,EAAEC,oBALd;AAMJC,IAAAA,KAAK,EAAEC;AANH,MAOFd,YAAY,CAAEG,KAAD,IAAWA,KAAK,CAACY,IAAN,OAAiB,EAA7B,CAPhB,CAD6B,CAU7B;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC,CAX6B,CAa7B;;AACA,QAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAC,KAAD,CAApD,CAd6B,CAgB7B;;AACA,QAAMqB,YAAY,GAChBJ,KAAK,CAACD,IAAN,OAAiB,EAAjB,IACAC,KAAK,CAACD,IAAN,GAAaM,QAAb,CAAsB,GAAtB,CADA,IAEAL,KAAK,CAACD,IAAN,GAAaM,QAAb,CAAsB,GAAtB,CAHF,CAjB6B,CAsB7B;;AACA,QAAMC,iBAAiB,GAAG,CAACF,YAAD,IAAiBF,cAA3C,CAvB6B,CAyB7B;;AACA,MAAIK,WAAW,GAAG,KAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYnB,WAAZ;;AACA,MAAIA,WAAW,IAAIgB,iBAAnB,EAAsC;AACpCC,IAAAA,WAAW,GAAG,IAAd;AACD,GA9B4B,CAgC7B;;;AAEA,QAAMG,uBAAuB,GAAIC,KAAD,IAAW;AACzCV,IAAAA,QAAQ,CAACU,KAAK,CAACC,MAAN,CAAazB,KAAd,CAAR;AACD,GAFD,CAlC6B,CAsC7B;;;AACA,QAAM0B,qBAAqB,GAAG,MAAM;AAClCV,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAFD,CAvC6B,CA2C7B;;;AACA,QAAMW,iBAAiB,GAAIH,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACI,cAAN;AACAZ,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AAEA,QAAII,WAAJ,EAAiB,OAJkB,CAMnC;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAX,IAAAA,SAAS;AACTG,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GAXD;;AAaA,QAAMa,gBAAgB,GAAGxB,iBAAiB,GACtC,sBADsC,GAEtC,cAFJ;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAEsB,iBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEE,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,OAAO,EAAEtB,sBAFX;AAGE,QAAA,MAAM,EAAEE,oBAHV;AAIE,QAAA,EAAE,EAAC,MAJL;AAKE,QAAA,KAAK,EAAER;AALT;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAWGI,iBAAiB,iBAChB;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAeE;AAAK,MAAA,SAAS,EAAEwB,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,OAAO,EAAEN,uBAFX;AAGE,QAAA,MAAM,EAAEG,qBAHV;AAIE,QAAA,EAAE,EAAC,OAJL;AAKE,QAAA,KAAK,EAAEb;AALT;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,EAyBG,CAACI,YAAD,IAAiBF,cAAjB,iBACC;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ,eA4BE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD,CA/FD;;GAAMjB,W;UAQAD,Y;;;KARAC,W;AAiGN,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\nimport useValidator from \"../Hooks/use-validator\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: name,\n    inputIsValid: nameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameInputCHangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset: nameReset,\n  } = useValidator((value) => value.trim() !== \"\");\n\n  // Field value\n  const [email, setEmail] = useState(\"\");\n\n  // Field Touch\n  const [emailIsTouched, setEmailIsTouched] = useState(false);\n\n  // Field value Validation\n  const emailIsValid =\n    email.trim() !== \"\" &&\n    email.trim().includes(\"@\") &&\n    email.trim().includes(\".\");\n\n  // Field Validation on blur\n  const emailInputIsValid = !emailIsValid && emailIsTouched;\n\n  // Form Validation\n  let formIsValid = false;\n  console.log(nameIsValid);\n  if (nameIsValid && emailInputIsValid) {\n    formIsValid = true;\n  }\n\n  //On Field Change Update\n\n  const emailInputCHangeHandler = (event) => {\n    setEmail(event.target.value);\n  };\n\n  //On Field blur Update\n  const emailInputBlurHandler = () => {\n    setEmailIsTouched(true);\n  };\n\n  //On Form Submit\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n    setEmailIsTouched(true);\n\n    if (formIsValid) return;\n\n    // Reset position\n    console.log(\"Submitted\");\n    nameReset();\n    setEmail(\"\");\n    setEmailIsTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          onInput={nameInputCHangeHandler}\n          onBlur={nameInputBlurHandler}\n          id=\"name\"\n          value={name}\n        />\n      </div>\n      {nameInputHasError && (\n        <p className=\"error-text\">Please Enter Valid Input</p>\n      )}\n\n      <div className={nameInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"text\"\n          onInput={emailInputCHangeHandler}\n          onBlur={emailInputBlurHandler}\n          id=\"email\"\n          value={email}\n        />\n      </div>\n      {!emailIsValid && emailIsTouched && (\n        <p className=\"error-text\">Please Enter Valid Input</p>\n      )}\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}