{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useValidator = validation => {\n  _s();\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [inputTouch, setInputTouch] = useState(false);\n  const inputIsValid = validation(inputValue);\n  const hasError = !inputIsValid && inputTouch;\n\n  const valueChangeHandler = event => {\n    setInputValue(event.target.value);\n  };\n\n  const inputBlurHandler = () => {\n    setInputTouch(true);\n  };\n\n  const reset = () => {\n    setInputValue(\"\");\n    setInputTouch(false);\n  };\n\n  return {\n    value: inputValue,\n    inputIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useValidator, \"zG9/yTfiNMA38jLqp6DOQ1NbERk=\");\n\nexport default useValidator;","map":{"version":3,"sources":["/home/mtech/Documents/react/form/src/Hooks/use-validator.js"],"names":["useState","useValidator","validation","inputValue","setInputValue","inputTouch","setInputTouch","inputIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AAAA;;AACnC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMO,YAAY,GAAGL,UAAU,CAACC,UAAD,CAA/B;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACpCN,IAAAA,aAAa,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAFD;;AAGA,QAAMQ,KAAK,GAAG,MAAM;AAClBV,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKA,SAAO;AACLM,IAAAA,KAAK,EAAET,UADF;AAELI,IAAAA,YAFK;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLI,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CA3BD;;GAAMb,Y;;AA6BN,eAAeA,YAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useValidator = (validation) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [inputTouch, setInputTouch] = useState(false);\n\n  const inputIsValid = validation(inputValue);\n  const hasError = !inputIsValid && inputTouch;\n\n  const valueChangeHandler = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const inputBlurHandler = () => {\n    setInputTouch(true);\n  };\n  const reset = () => {\n    setInputValue(\"\");\n    setInputTouch(false);\n  };\n\n  return {\n    value: inputValue,\n    inputIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useValidator;\n"]},"metadata":{},"sourceType":"module"}