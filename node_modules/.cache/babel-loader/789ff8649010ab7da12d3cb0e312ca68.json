{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useState } from \"react\";\nconst initialStat = {\n  value: \"\",\n  hasError: false,\n  isValid: false,\n  isTouch: false\n};\n\nconst CheckValidation = (state, action) => {\n  if (action.type === \"Add-Value\") {\n    const hasError = !action.isValid && state.isTouch;\n    return {\n      value: action.value,\n      hasError: hasError,\n      isValid: action.isValid,\n      isTouch: state.isTouch\n    };\n  }\n\n  if (action.type === \"Blur-Value\") {\n    return {\n      value: state.value,\n      hasError: state.hasError,\n      isValid: state.isValid,\n      isTouch: true\n    };\n  }\n\n  return initialStat;\n};\n\n_c = CheckValidation;\n\nconst useValidator = validation => {\n  _s();\n\n  const [input, inputController] = useReducer(CheckValidation, initialStat);\n\n  const valueChangeHandler = event => {\n    inputController({\n      type: \"Add-Value\",\n      value: event.target.value,\n      isValid: validation(event.target.value)\n    });\n  };\n\n  const inputBlurHandler = () => {\n    inputController({\n      type: \"Blur-Value\"\n    });\n  };\n\n  const reset = () => {\n    inputController({\n      type: \"Reset-Value\"\n    });\n  };\n\n  return {\n    value: input.value,\n    isValid: input.isValid,\n    hasError: input.hasError,\n    changeHandler: valueChangeHandler,\n    blurHandler: inputBlurHandler,\n    reset\n  };\n};\n\n_s(useValidator, \"5pGg4v/1pd4hu83XpScFaGfYdj4=\");\n\nexport default useValidator;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckValidation\");","map":{"version":3,"sources":["/home/mtech/Documents/react/form/src/Hooks/use-validator.js"],"names":["useReducer","useState","initialStat","value","hasError","isValid","isTouch","CheckValidation","state","action","type","useValidator","validation","input","inputController","valueChangeHandler","event","target","inputBlurHandler","reset","changeHandler","blurHandler"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,QAAQ,EAAE,KAFQ;AAGlBC,EAAAA,OAAO,EAAE,KAHS;AAIlBC,EAAAA,OAAO,EAAE;AAJS,CAApB;;AAMA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,MAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,UAAMN,QAAQ,GAAG,CAACK,MAAM,CAACJ,OAAR,IAAmBG,KAAK,CAACF,OAA1C;AACA,WAAO;AACLH,MAAAA,KAAK,EAAEM,MAAM,CAACN,KADT;AAELC,MAAAA,QAAQ,EAAEA,QAFL;AAGLC,MAAAA,OAAO,EAAEI,MAAM,CAACJ,OAHX;AAILC,MAAAA,OAAO,EAAEE,KAAK,CAACF;AAJV,KAAP;AAMD;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AACLP,MAAAA,KAAK,EAAEK,KAAK,CAACL,KADR;AAELC,MAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAFX;AAGLC,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAHV;AAILC,MAAAA,OAAO,EAAE;AAJJ,KAAP;AAMD;;AAED,SAAOJ,WAAP;AACD,CArBD;;KAAMK,e;;AAuBN,MAAMI,YAAY,GAAIC,UAAD,IAAgB;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,eAAR,IAA2Bd,UAAU,CAACO,eAAD,EAAkBL,WAAlB,CAA3C;;AAEA,QAAMa,kBAAkB,GAAIC,KAAD,IAAW;AACpCF,IAAAA,eAAe,CAAC;AACdJ,MAAAA,IAAI,EAAE,WADQ;AAEdP,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad,KAFN;AAGdE,MAAAA,OAAO,EAAEO,UAAU,CAACI,KAAK,CAACC,MAAN,CAAad,KAAd;AAHL,KAAD,CAAf;AAKD,GAND;;AAQA,QAAMe,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,eAAe,CAAC;AACdJ,MAAAA,IAAI,EAAE;AADQ,KAAD,CAAf;AAGD,GAJD;;AAMA,QAAMS,KAAK,GAAG,MAAM;AAClBL,IAAAA,eAAe,CAAC;AACdJ,MAAAA,IAAI,EAAE;AADQ,KAAD,CAAf;AAGD,GAJD;;AAMA,SAAO;AACLP,IAAAA,KAAK,EAAEU,KAAK,CAACV,KADR;AAELE,IAAAA,OAAO,EAAEQ,KAAK,CAACR,OAFV;AAGLD,IAAAA,QAAQ,EAAES,KAAK,CAACT,QAHX;AAILgB,IAAAA,aAAa,EAAEL,kBAJV;AAKLM,IAAAA,WAAW,EAAEH,gBALR;AAMLC,IAAAA;AANK,GAAP;AAQD,CA/BD;;GAAMR,Y;;AAiCN,eAAeA,YAAf","sourcesContent":["import { useReducer, useState } from \"react\";\n\nconst initialStat = {\n  value: \"\",\n  hasError: false,\n  isValid: false,\n  isTouch: false,\n};\nconst CheckValidation = (state, action) => {\n  if (action.type === \"Add-Value\") {\n    const hasError = !action.isValid && state.isTouch;\n    return {\n      value: action.value,\n      hasError: hasError,\n      isValid: action.isValid,\n      isTouch: state.isTouch,\n    };\n  }\n\n  if (action.type === \"Blur-Value\") {\n    return {\n      value: state.value,\n      hasError: state.hasError,\n      isValid: state.isValid,\n      isTouch: true,\n    };\n  }\n\n  return initialStat;\n};\n\nconst useValidator = (validation) => {\n  const [input, inputController] = useReducer(CheckValidation, initialStat);\n\n  const valueChangeHandler = (event) => {\n    inputController({\n      type: \"Add-Value\",\n      value: event.target.value,\n      isValid: validation(event.target.value),\n    });\n  };\n\n  const inputBlurHandler = () => {\n    inputController({\n      type: \"Blur-Value\",\n    });\n  };\n\n  const reset = () => {\n    inputController({\n      type: \"Reset-Value\",\n    });\n  };\n\n  return {\n    value: input.value,\n    isValid: input.isValid,\n    hasError: input.hasError,\n    changeHandler: valueChangeHandler,\n    blurHandler: inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useValidator;\n"]},"metadata":{},"sourceType":"module"}